{"version":3,"sources":["components/InputField/InputField.jsx","constants.js","components/Footer/Footer.jsx","types.js","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","App.js","hooks/useLocalStorage.js","index.js"],"names":["InputField","addNewTodo","useState","inputValue","setInputValue","onSubmit","e","preventDefault","newTodo","title","id","uuidv4","completed","isBeingEdited","trim","type","value","onChange","target","className","placeholder","FILTERS","Footer","PropTypes","shape","string","isRequired","bool","todos","clearCompleted","handleFilter","todosInProgress","filter","todo","onClickHandleFilter","length","onClick","href","Todo","removeItem","checkTodo","handleEditingTodo","handleEditedTodo","todoTitle","setTodoTitle","cn","editing","checked","onDoubleClick","onBlur","newTitle","onKeyDown","key","TodoList","map","App","initialValue","JSON","parse","localStorage","getItem","setValue","useEffect","setItem","stringify","newValue","useLocalStorage","setTodos","allStatus","setAllStatus","setFilter","filteredTodos","useMemo","todosList","getFilteredTodos","every","prevTodos","htmlFor","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.513761c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nexport const InputField = ({ addNewTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newTodo = {\n      title: inputValue,\n      id: uuidv4(),\n      completed: false,\n      isBeingEdited: false,\n    };\n\n    if (newTodo.title.trim()) {\n      addNewTodo(newTodo);\n    }\n\n    setInputValue('');\n  };\n\n  const onInput = (e) => {\n    if (e.target.value.trim()) {\n      setInputValue(e.target.value);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={onSubmit}\n    >\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={onInput}\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n      />\n    </form>\n  );\n};\n\nInputField.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'all',\n  active: 'active',\n  completed: 'completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from '../../constants';\nimport { TypeTodo } from '../../types';\n\nexport const Footer = ({\n  todos,\n  clearCompleted,\n  handleFilter,\n}) => {\n  const todosInProgress = todos.filter(todo => !todo.completed);\n\n  const onClickHandleFilter = (filter) => {\n    handleFilter(filter);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${todosInProgress.length} items left`}\n      </span>\n\n      <ul\n        className=\"filters\"\n      >\n        <li>\n          <a\n            onClick={() => onClickHandleFilter(FILTERS.all)}\n            href=\"#/\"\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => onClickHandleFilter(FILTERS.active)}\n            href=\"#/active\"\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => onClickHandleFilter(FILTERS.completed)}\n            href=\"#/completed\"\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TypeTodo = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  isBeingEdited: PropTypes.bool.isRequired,\n});\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TypeTodo } from '../../types';\n\nexport const Todo = ({\n  todo: { id, title, completed, isBeingEdited },\n  removeItem,\n  checkTodo,\n  handleEditingTodo,\n  handleEditedTodo,\n}) => {\n  const [todoTitle, setTodoTitle] = useState('');\n\n  const keyDownHandler = (e) => {\n    if (e.key === 'Enter' && todoTitle.trim()) {\n      handleEditedTodo(id, todoTitle);\n    } else if (e.key === 'Escape') {\n      setTodoTitle(title);\n      handleEditedTodo(id, title);\n    }\n  };\n\n  const handleBlur = (newTitle, todoId) => {\n    handleEditedTodo(todoId, newTitle);\n  };\n\n  return (\n    <li\n      key={id}\n      className={cn('Todo', {\n        completed,\n        editing: isBeingEdited,\n      })}\n\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => checkTodo(id)}\n          checked={completed}\n        />\n        <label\n          onDoubleClick={() => {\n            handleEditingTodo(id);\n          }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => removeItem(id)}\n        />\n      </div>\n      <input\n        onBlur={e => handleBlur(e.target.value, id)}\n        value={todoTitle}\n        onChange={(e) => {\n          setTodoTitle(e.target.value);\n        }}\n        onKeyDown={keyDownHandler}\n        type=\"text\"\n        className=\"edit\"\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: TypeTodo.isRequired,\n  removeItem: PropTypes.func.isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  handleEditingTodo: PropTypes.func.isRequired,\n  handleEditedTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { TypeTodo } from '../../types';\n\nexport const TodoList = ({\n  removeItem,\n  todos,\n  checkTodo,\n  handleEditingTodo,\n  handleEditedTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        className=\"TodoList\"\n        key={todo.id}\n        removeItem={removeItem}\n        checkTodo={checkTodo}\n        handleEditingTodo={handleEditingTodo}\n        handleEditedTodo={handleEditedTodo}\n        todo={todo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  removeItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(TypeTodo).isRequired,\n  checkTodo: PropTypes.func.isRequired,\n  handleEditingTodo: PropTypes.func.isRequired,\n  handleEditedTodo: PropTypes.func.isRequired,\n};\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { InputField } from './components/InputField';\nimport { Footer } from './components/Footer';\nimport { TodoList } from './components/TodoList';\nimport { FILTERS } from './constants';\n\nfunction App() {\n  const [todos, setTodos] = useLocalStorage('todos', []);\n  const [allStatus, setAllStatus] = useState(false);\n  const [filter, setFilter] = useState(FILTERS.all);\n\n  const getFilteredTodos = (todosList) => {\n    switch (filter) {\n      case (FILTERS.active):\n        return todosList.filter(todo => !todo.completed);\n\n      case (FILTERS.completed):\n        return todosList.filter(todo => todo.completed);\n\n      default:\n        return todosList;\n    }\n  };\n\n  const filteredTodos = useMemo(() => getFilteredTodos(todos), [todos, filter]);\n\n  const addNewTodo = (newTodo) => {\n    setTodos(prevTodos => [newTodo, ...prevTodos]);\n  };\n\n  useEffect(() => {\n    if (todos.every(todo => todo.completed)) {\n      setAllStatus(true);\n    } else {\n      setAllStatus(false);\n    }\n  }, [todos]);\n\n  const toggleCompletedStatus = (todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeItem = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const toggleAll = () => {\n    if (allStatus) {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    } else {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    }\n\n    setAllStatus(!allStatus);\n  };\n\n  const handleEditingTodo = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          isBeingEdited: true,\n        };\n      }\n\n      return {\n        ...todo,\n        isBeingEdited: false,\n      };\n    }));\n  };\n\n  const handleEditedTodo = (todoId, title) => {\n    if (title.trim()) {\n      setTodos(todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            isBeingEdited: false,\n            title,\n          };\n        }\n\n        return todo;\n      }));\n\n      return todos;\n    }\n\n    return todos;\n  };\n\n  const handleFilter = (value) => {\n    setFilter(value);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <InputField addNewTodo={addNewTodo} />\n      </header>\n\n      <section className=\"main\">\n        {todos.length > 0 && (\n          <>\n            <input\n              checked={allStatus}\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onChange={toggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        )}\n\n        <TodoList\n          filter={filter}\n          handleEditedTodo={handleEditedTodo}\n          handleEditingTodo={handleEditingTodo}\n          removeItem={removeItem}\n          checkTodo={toggleCompletedStatus}\n          todos={filteredTodos}\n        />\n      </section>\n\n      {(todos.length > 0) && (\n        <Footer\n          clearCompleted={clearCompleted}\n          todos={todos}\n          handleFilter={handleFilter}\n        />\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem(key)) || initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [key, value]);\n\n  const saveValue = (newValue) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, saveValue];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}